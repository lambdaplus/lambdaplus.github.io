<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小窝</title>
  <subtitle>爱生活，爱跑步，大爱妹子(单身狗的妄想！)</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://lambdaplus.github.io/"/>
  <updated>2017-02-07T02:14:14.025Z</updated>
  <id>http://lambdaplus.github.io/</id>
  
  <author>
    <name>木一晟</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>咏春</title>
    <link href="http://lambdaplus.github.io/2017/02/07/%E7%9E%8E%E6%89%AF/"/>
    <id>http://lambdaplus.github.io/2017/02/07/瞎扯/</id>
    <published>2017-02-07T02:05:32.000Z</published>
    <updated>2017-02-07T02:14:14.025Z</updated>
    
    <content type="html"><![CDATA[<p>春叫猫儿猫叫春，<br>听它越叫越精神。<br>老僧亦有猫儿意，<br>不敢人前叫一声。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;春叫猫儿猫叫春，&lt;br&gt;听它越叫越精神。&lt;br&gt;老僧亦有猫儿意，&lt;br&gt;不敢人前叫一声。&lt;/p&gt;

    
    </summary>
    
    
      <category term="瞎扯" scheme="http://lambdaplus.github.io/tags/%E7%9E%8E%E6%89%AF/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://lambdaplus.github.io/2016/11/29/hello-world/"/>
    <id>http://lambdaplus.github.io/2016/11/29/hello-world/</id>
    <published>2016-11-29T13:30:29.000Z</published>
    <updated>2017-02-06T09:47:30.629Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
      <category term="Hexo" scheme="http://lambdaplus.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Test</title>
    <link href="http://lambdaplus.github.io/2016/11/29/fuck/"/>
    <id>http://lambdaplus.github.io/2016/11/29/fuck/</id>
    <published>2016-11-29T13:29:54.000Z</published>
    <updated>2017-02-06T09:47:30.629Z</updated>
    
    <content type="html"><![CDATA[<p>仅用于测试。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;仅用于测试。&lt;/p&gt;

    
    </summary>
    
    
      <category term="Test" scheme="http://lambdaplus.github.io/tags/Test/"/>
    
  </entry>
  
  <entry>
    <title>一个异步爬虫</title>
    <link href="http://lambdaplus.github.io/2016/11/19/one_async_crawl/"/>
    <id>http://lambdaplus.github.io/2016/11/19/one_async_crawl/</id>
    <published>2016-11-19T14:30:19.000Z</published>
    <updated>2017-02-06T09:47:30.629Z</updated>
    
    <content type="html"><![CDATA[<p>看了好多天的异步，今天终于算是大致理解了。模仿着写了一个异步小爬虫。以前很不理解哪里要使用异步，搞的头大。对于爬虫来说，耗时的地方是对服务器的请求，于是把对网页的请求使用异步即可！<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># coding=utf-8</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> re</div><div class="line"><span class="keyword">import</span> aiohttp</div><div class="line"><span class="keyword">import</span> asyncio</div><div class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</div><div class="line"></div><div class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(url, headers)</span>:</span></div><div class="line">    res = <span class="keyword">await</span> aiohttp.request(<span class="string">'GET'</span>, url)</div><div class="line">    body = res.read()</div><div class="line">    <span class="keyword">return</span> (<span class="keyword">await</span> body)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_title</span><span class="params">(html, name=None)</span>:</span></div><div class="line">    soup = BeautifulSoup(html, <span class="string">'lxml'</span>)</div><div class="line">    title_list = soup.select(<span class="string">'div.pic &gt; a &gt; img'</span>)</div><div class="line">    <span class="string">'''</span></div><div class="line">    title_list中的如下格式</div><div class="line">     &lt;img alt="这个杀手不太冷" class="" src="https://img3.doubanio.com</div><div class="line">     /view/movie_poster_cover/ipst/public/p511118051.jpg"/</div><div class="line">    '''</div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        title = [re.findall(<span class="string">r'alt="(.*?)"'</span>, str(title))[<span class="number">0</span>] <span class="keyword">for</span> title <span class="keyword">in</span> title_list]</div><div class="line">    <span class="keyword">except</span>:</div><div class="line">        <span class="keyword">pass</span></div><div class="line">    <span class="keyword">return</span> title</div><div class="line">        </div><div class="line"></div><div class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">print_title</span><span class="params">(page)</span>:</span></div><div class="line">    url = <span class="string">'https://movie.douban.com/top250?start=&#123;&#125;&amp;filter='</span>.format(page)</div><div class="line">    <span class="keyword">with</span> <span class="keyword">await</span> sem:</div><div class="line">        html = <span class="keyword">await</span> get(url, headers)</div><div class="line">    title = get_title(html)</div><div class="line">    print(<span class="string">'&#123;&#125; &#123;&#125;'</span>.format(page, title))</div><div class="line">    </div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    headers = &#123;<span class="string">'User-Agent'</span>:<span class="string">'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 \</span></div><div class="line">                (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36'&#125;</div><div class="line">    pages = list(range(<span class="number">0</span>, <span class="number">250</span>, <span class="number">25</span>))</div><div class="line">    sem = asyncio.Semaphore(<span class="number">4</span>) <span class="comment"># 限制协程并发量</span></div><div class="line">    loop = asyncio.get_event_loop()</div><div class="line">    f = asyncio.wait([print_title(page) <span class="keyword">for</span> page <span class="keyword">in</span> pages])</div><div class="line">    %time loop.run_until_complete(f) <span class="comment"># %time 为Ipython 自带功能模块</span></div><div class="line">    </div><div class="line">Out：CPU times: user <span class="number">884</span> ms, sys: <span class="number">12</span> ms, total: <span class="number">896</span> ms</div><div class="line">Wall time: <span class="number">1.27</span> s</div></pre></td></tr></table></figure></p>
<p>随着 <code>sem=asyncio.Semaphore(4)</code>中Semaphore限制的减少，此程序越来越快！</p>
<p>比我去年的写的一只小爬虫不知道快到那里去<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">import</span> re</div><div class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup <span class="keyword">as</span> bs</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fetch</span><span class="params">(url)</span>:</span></div><div class="line">    s = requests.Session()</div><div class="line">    s.headers.update(&#123;<span class="string">"user-agent"</span>: user_agent&#125;)</div><div class="line">    <span class="keyword">return</span> s.get(url)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">title_get</span><span class="params">(url)</span>:</span></div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        result = fetch(url)</div><div class="line">    <span class="keyword">except</span> requests.exceptions.RequestException:</div><div class="line">        <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line">    html = bs(result.text, <span class="string">'lxml'</span>)</div><div class="line">    title_list = html.select(<span class="string">'div.pic &gt; a &gt; img'</span>)</div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        title = [re.findall(<span class="string">r'alt="(.*?)"'</span>, str(title))[<span class="number">0</span>] <span class="keyword">for</span> title <span class="keyword">in</span> title_list]</div><div class="line">    <span class="keyword">except</span> IndexError:</div><div class="line">        <span class="keyword">pass</span></div><div class="line">    <span class="keyword">return</span> title</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">not_use_thread</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">for</span> page <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">250</span>, <span class="number">25</span>):</div><div class="line">        url = <span class="string">'https://movie.douban.com/top250?start=&#123;&#125;&amp;filter='</span>.format(page)</div><div class="line">        title_get(url)</div><div class="line">        </div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    user_agent = <span class="string">'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 \</span></div><div class="line">                (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36'</div><div class="line">    %time not_use_thread()</div><div class="line">    </div><div class="line">Out: CPU times: user <span class="number">1.07</span> s, sys: <span class="number">20</span> ms, total: <span class="number">1.09</span> s</div><div class="line">Wall time: <span class="number">7.26</span> s</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;看了好多天的异步，今天终于算是大致理解了。模仿着写了一个异步小爬虫。以前很不理解哪里要使用异步，搞的头大。对于爬虫来说，耗时的地方是对服务器的请求，于是把对网页的请求使用异步即可！&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr
    
    </summary>
    
    
      <category term="爬虫" scheme="http://lambdaplus.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>装饰器小酌</title>
    <link href="http://lambdaplus.github.io/2016/11/10/Decorator/"/>
    <id>http://lambdaplus.github.io/2016/11/10/Decorator/</id>
    <published>2016-11-10T13:30:29.000Z</published>
    <updated>2017-02-06T09:47:30.629Z</updated>
    
    <content type="html"><![CDATA[<p>Python中的装饰器真是个好东西。熟悉我的人都知道，挺能喷的一个人。但是，技术不是喷出来的，前言写的再花，也不会让我的装饰器比别人的更有威力。哈哈哈</p>
<h2 id="开撸"><a href="#开撸" class="headerlink" title="开撸"></a>开撸</h2><h3 id="1-不带参数的"><a href="#1-不带参数的" class="headerlink" title="1. 不带参数的"></a>1. 不带参数的</h3><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">In [17]: from functools import wraps</div><div class="line">    ...: </div><div class="line">    ...: def log(func):</div><div class="line">    ...:     @wraps(func)</div><div class="line">    ...:     def wrapper(*args, **kw):</div><div class="line">    ...:         print("I'm a log ^*^")</div><div class="line">    ...:         result = func(*args, **kw)</div><div class="line">    ...:         return result</div><div class="line">    ...:     return wrapper</div><div class="line">    ...: </div><div class="line"></div><div class="line">In [19]: @log</div><div class="line">    ...: def hello():</div><div class="line">    ...:     print('Hello World')</div><div class="line">    ...:     </div><div class="line"></div><div class="line">In [20]: hello()</div><div class="line">I'm a log ^*^</div><div class="line">Hello World</div></pre></td></tr></table></figure>
<h3 id="2-带参数的怎么写呢？？？"><a href="#2-带参数的怎么写呢？？？" class="headerlink" title="2.带参数的怎么写呢？？？"></a>2.带参数的怎么写呢？？？</h3><p>请看<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">5</span>]: <span class="keyword">from</span> functools <span class="keyword">import</span> wraps</div><div class="line"></div><div class="line">In [<span class="number">8</span>]: <span class="function"><span class="keyword">def</span> <span class="title">logs</span><span class="params">(file=<span class="string">"info.log"</span>)</span>:</span></div><div class="line">   ...:     <span class="function"><span class="keyword">def</span> <span class="title">decorate</span><span class="params">(func)</span>:</span></div><div class="line">   ...:         @wraps(func)</div><div class="line">   ...:         <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kw)</span>:</span></div><div class="line">   ...:             log = func.__name__ + <span class="string">" was called"</span></div><div class="line">   ...:             print(log)</div><div class="line">   ...:             <span class="keyword">with</span> open(file, <span class="string">'a'</span>) <span class="keyword">as</span> f:</div><div class="line">   ...:                 f.write(log + <span class="string">'\n'</span>)</div><div class="line">   ...:         <span class="keyword">return</span> wrapper</div><div class="line">   ...:     <span class="keyword">return</span> decorate</div><div class="line">   ...: </div><div class="line"></div><div class="line">In [<span class="number">11</span>]: @logs()</div><div class="line">    ...: <span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></div><div class="line">    ...:     print(<span class="string">'Hello World!'</span>)</div><div class="line">    ...:     </div><div class="line"></div><div class="line">In [<span class="number">12</span>]: hello()</div><div class="line">hello was called</div><div class="line"></div><div class="line">In [<span class="number">13</span>]: @logs(file=<span class="string">'info2.log'</span>)</div><div class="line">    ...: <span class="function"><span class="keyword">def</span> <span class="title">hello2</span><span class="params">()</span>:</span></div><div class="line">    ...:     print(<span class="string">'Hello World!'</span>)</div><div class="line">    ...:     </div><div class="line"></div><div class="line">In [<span class="number">14</span>]: hello2()</div><div class="line">hello2 was called</div></pre></td></tr></table></figure></p>
<h3 id="3-flask-login-login-required"><a href="#3-flask-login-login-required" class="headerlink" title="3. flask_login.login_required"></a>3. flask_login.login_required</h3><p>flask_login.login_required 是也是一个装饰器，login_required 装饰器的主要作用就是让只有已登陆和认证过的用户才能继续调用被其装饰的视图(view)函数。下面是截取的 <strong>片段</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">login_required</span><span class="params">(func)</span>:</span></div><div class="line"><span class="meta">    @wraps(func)</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decorated_view</span><span class="params">(*args, **kwargs)</span>:</span></div><div class="line">        <span class="keyword">if</span> request.method <span class="keyword">in</span> EXEMPT_METHODS:</div><div class="line">            <span class="keyword">return</span> func(*args, **kwargs)</div><div class="line">        <span class="keyword">elif</span> current_app.login_manager._login_disabled:</div><div class="line">            <span class="keyword">return</span> func(*args, **kwargs)</div><div class="line">        <span class="keyword">elif</span> <span class="keyword">not</span> current_user.is_authenticated:</div><div class="line">            <span class="keyword">return</span> current_app.login_manager.unauthorized()</div><div class="line">        <span class="keyword">return</span> func(*args, **kwargs)</div><div class="line">    <span class="keyword">return</span> decorated_view</div></pre></td></tr></table></figure></p>
<p>就到这里吧，反正很少有人会来看。就一个人浪吧。</p>
<hr>
<h2 id="更新"><a href="#更新" class="headerlink" title="更新"></a><del>更新</del></h2><h3 id="4-类装饰器"><a href="#4-类装饰器" class="headerlink" title="4.类装饰器"></a>4.类装饰器</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">1</span>]: <span class="class"><span class="keyword">class</span> <span class="title">Log</span><span class="params">()</span>:</span></div><div class="line">   ...:     <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, file=<span class="string">"info.log"</span>)</span>:</span></div><div class="line">   ...:         self.file = file</div><div class="line">   ...:     <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, func)</span>:</span></div><div class="line">   ...:         log = func.__name__  + <span class="string">" was called"</span></div><div class="line">   ...:         print(log)</div><div class="line">   ...:         <span class="keyword">with</span> open(self.file, <span class="string">'a'</span>) <span class="keyword">as</span> f:</div><div class="line">   ...:             f.write(log+<span class="string">'\n'</span>)</div><div class="line">   ...: </div><div class="line"></div><div class="line">In [<span class="number">2</span>]: @Log()</div><div class="line">   ...: <span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></div><div class="line">   ...:     print(<span class="string">'Hello World!'</span>)</div><div class="line">   ...:     </div><div class="line">hello was called</div></pre></td></tr></table></figure>
<p>可复制粘贴代码在<a href="https://github.com/lambdaplus/python/tree/master/decorate" target="_blank" rel="external">这里</a></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li><p>哦，对了，附上一个<a href="http://stackoverflow.com/questions/739654/how-to-make-a-chain-of-function-decorators-in-python/1594484#1594484" target="_blank" rel="external">牛逼的链接</a>，墙裂推荐不熟悉装饰器的小伙伴们看看。</p>
</li>
<li><p><a href="http://book.pythontips.com/en/latest/decorators.html#decorator-classes" target="_blank" rel="external">Python tips Decorates</a></p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Python中的装饰器真是个好东西。熟悉我的人都知道，挺能喷的一个人。但是，技术不是喷出来的，前言写的再花，也不会让我的装饰器比别人的更有威力。哈哈哈&lt;/p&gt;
&lt;h2 id=&quot;开撸&quot;&gt;&lt;a href=&quot;#开撸&quot; class=&quot;headerlink&quot; title=&quot;开撸&quot;&gt;&lt;
    
    </summary>
    
    
      <category term="Python" scheme="http://lambdaplus.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>豆瓣电影Top250爬虫</title>
    <link href="http://lambdaplus.github.io/2016/10/24/DoubanMovieTop_250_Crawl/"/>
    <id>http://lambdaplus.github.io/2016/10/24/DoubanMovieTop_250_Crawl/</id>
    <published>2016-10-24T13:30:29.000Z</published>
    <updated>2017-02-06T09:47:30.629Z</updated>
    
    <content type="html"><![CDATA[<h2 id="爬取豆瓣电影top250。"><a href="#爬取豆瓣电影top250。" class="headerlink" title="爬取豆瓣电影top250。"></a>爬取豆瓣电影top250。</h2><h2 id="1-单线程版"><a href="#1-单线程版" class="headerlink" title="1. 单线程版"></a>1. 单线程版</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">import</span> re</div><div class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</div><div class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup <span class="keyword">as</span> bs</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fetch</span><span class="params">(url)</span>:</span></div><div class="line">    s = requests.Session()</div><div class="line">    s.headers.update(&#123;<span class="string">"user-agent"</span>: user_agent&#125;)</div><div class="line">    <span class="keyword">return</span> s.get(url)</div><div class="line">    </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">title_get</span><span class="params">(url)</span>:</span></div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        result = fetch(url)</div><div class="line">    <span class="keyword">except</span> requests.exceptions.RequestException:</div><div class="line">        <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line">    html = bs(result.text, <span class="string">'lxml'</span>)</div><div class="line">    title_list = html.select(<span class="string">'div.pic &gt; a &gt; img'</span>)</div><div class="line">     <span class="string">'''</span></div><div class="line">    title_list中的元素格式如下 e.g: </div><div class="line">     &lt;img alt="这个杀手不太冷" class="" src="https://img3.doubanio.com</div><div class="line">     /view/movie_poster_cover/ipst/public/p511118051.jpg"/</div><div class="line">    '''</div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        title = [re.findall(<span class="string">r'alt="(.*?)"'</span>, str(title))[<span class="number">0</span>] <span class="keyword">for</span> title <span class="keyword">in</span> title_list]</div><div class="line">    <span class="keyword">except</span> IndexError:</div><div class="line">        <span class="keyword">pass</span></div><div class="line">    <span class="keyword">return</span> title</div><div class="line">    </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">not_use_thread</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">for</span> page <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">250</span>, <span class="number">25</span>):</div><div class="line">        url = <span class="string">'https://movie.douban.com/top250?start=&#123;&#125;&amp;filter='</span>.format(page)</div><div class="line">        title_get(url)</div><div class="line">        </div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    user_agent = <span class="string">'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 \</span></div><div class="line">                (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36'</div><div class="line">    %time not_use_thread() <span class="comment"># 我使用的Ipython %time是其自带的模块 下面是其输出！</span></div><div class="line">    </div><div class="line">Out： CPU times: user <span class="number">1.11</span> s, sys: <span class="number">8</span> ms, total: <span class="number">1.12</span> s</div><div class="line">Wall time: <span class="number">3.58</span> s</div></pre></td></tr></table></figure>
<h2 id="2-多线程版"><a href="#2-多线程版" class="headerlink" title="2. 多线程版"></a>2. 多线程版</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">import</span> re</div><div class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</div><div class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup <span class="keyword">as</span> bs</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fetch</span><span class="params">(url)</span>:</span></div><div class="line">    s = requests.Session()</div><div class="line">    s.headers.update(&#123;<span class="string">"user-agent"</span>: user_agent&#125;)</div><div class="line">    <span class="keyword">return</span> s.get(url)</div><div class="line">    </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">title_get</span><span class="params">(url)</span>:</span></div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        result = fetch(url)</div><div class="line">    <span class="keyword">except</span> requests.exceptions.RequestException:</div><div class="line">        <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line">    html = bs(result.text, <span class="string">'lxml'</span>)</div><div class="line">    title_list = html.select(<span class="string">'div.pic &gt; a &gt; img'</span>)</div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        title = [re.findall(<span class="string">r'alt="(.*?)"'</span>, str(title))[<span class="number">0</span>] <span class="keyword">for</span> title <span class="keyword">in</span> title_list] </div><div class="line">    <span class="keyword">except</span> IndexError:</div><div class="line">        <span class="keyword">pass</span></div><div class="line">    <span class="keyword">return</span> title</div><div class="line">    </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">use_thread</span><span class="params">()</span>:</span></div><div class="line">    threads = []</div><div class="line">    <span class="keyword">for</span> page <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">250</span>, <span class="number">25</span>):</div><div class="line">        url = <span class="string">'https://movie.douban.com/top250?start=&#123;&#125;&amp;filter='</span>.format(page)</div><div class="line">        t = Thread(target=title_get, args=(url, ))</div><div class="line">        t.setDaemon(<span class="keyword">True</span>)</div><div class="line">        threads.append(t)</div><div class="line">        t.start()</div><div class="line">        </div><div class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> threads:</div><div class="line">        t.join()</div><div class="line">        </div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    user_agent = <span class="string">'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 \</span></div><div class="line">                (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36'</div><div class="line">    %time use_thread()</div><div class="line">    </div><div class="line">Out： CPU times: user <span class="number">1.16</span> s, sys: <span class="number">172</span> ms, total: <span class="number">1.33</span> s</div><div class="line">Wall time: <span class="number">1.28</span> s</div></pre></td></tr></table></figure>
<h3 id="使用线程池"><a href="#使用线程池" class="headerlink" title="使用线程池"></a>使用线程池</h3><p>线程的创建和销毁是一个比较重的开销。所以，使用线程池，重用线程池中的线程！</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">use_thread_pool</span><span class="params">()</span>:</span></div><div class="line">    url = <span class="string">'https://movie.douban.com/top250?start=&#123;&#125;&amp;filter='</span></div><div class="line">    urls = [url.format(page) <span class="keyword">for</span> page <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">250</span>, <span class="number">25</span>)]</div><div class="line">    pool = ThreadPool(<span class="number">7</span>)</div><div class="line">    pool.map(title_get, urls)</div><div class="line">    pool.close()</div><div class="line">    pool.join()</div><div class="line">        </div><div class="line">Out： CPU times: user <span class="number">1.23</span> s, sys: <span class="number">152</span> ms, total: <span class="number">1.38</span> s</div><div class="line">Wall time: <span class="number">1.29</span> s</div></pre></td></tr></table></figure>
<p>再加上一个异步的吧</p>
<h2 id="3-异步版"><a href="#3-异步版" class="headerlink" title="3. 异步版"></a>3. 异步版</h2><p>此版本使用的是异步库<code>asyncio</code>和对其进行深度封装的库<code>aiohttp</code>。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># coding=utf-8</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> re</div><div class="line"><span class="keyword">import</span> aiohttp</div><div class="line"><span class="keyword">import</span> asyncio</div><div class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</div><div class="line"></div><div class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(url, headers)</span>:</span></div><div class="line">    res = <span class="keyword">await</span> aiohttp.request(<span class="string">'GET'</span>, url)</div><div class="line">    body = res.read()</div><div class="line">    <span class="keyword">return</span> (<span class="keyword">await</span> body)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_title</span><span class="params">(html, name=None)</span>:</span></div><div class="line">    soup = BeautifulSoup(html, <span class="string">'lxml'</span>)</div><div class="line">    title_list = soup.select(<span class="string">'div.pic &gt; a &gt; img'</span>)</div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        title = [re.findall(<span class="string">r'alt="(.*?)"'</span>, str(title))[<span class="number">0</span>] <span class="keyword">for</span> title <span class="keyword">in</span> title_list]</div><div class="line">    <span class="keyword">except</span> IndexError:</div><div class="line">        <span class="keyword">pass</span></div><div class="line">    <span class="keyword">return</span> title</div><div class="line">        </div><div class="line"></div><div class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">print_title</span><span class="params">(page)</span>:</span></div><div class="line">    url = <span class="string">'https://movie.douban.com/top250?start=&#123;&#125;&amp;filter='</span>.format(page)</div><div class="line">    <span class="keyword">with</span> <span class="keyword">await</span> sem:</div><div class="line">        html = <span class="keyword">await</span> get(url, headers)</div><div class="line">    title = get_title(html)</div><div class="line"><span class="comment">#    print('&#123;&#125; &#123;&#125;'.format(page, title))</span></div><div class="line">    </div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    headers = &#123;<span class="string">'User-Agent'</span>:<span class="string">'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 \</span></div><div class="line">                (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36'&#125;</div><div class="line">    pages = list(range(<span class="number">0</span>, <span class="number">250</span>, <span class="number">25</span>))</div><div class="line">    sem = asyncio.Semaphore(<span class="number">5</span>) <span class="comment"># 限制并发量</span></div><div class="line">    loop = asyncio.get_event_loop()</div><div class="line">    f = asyncio.wait([print_title(page) <span class="keyword">for</span> page <span class="keyword">in</span> pages])</div><div class="line">    %time loop.run_until_complete(f)</div><div class="line">    </div><div class="line">Out: CPU times: user <span class="number">984</span> ms, sys: <span class="number">28</span> ms, total: <span class="number">1.01</span> s</div><div class="line">Wall time: <span class="number">1.67</span> s</div></pre></td></tr></table></figure></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><strong>以上测试时间基于笔者电脑的配置和网络情况, 因人而异！</strong></p>
<ol>
<li>单线程和多线程的对比，可以看到，使用多线程后速度提升了3倍。</li>
<li>使用线程池后，在限制线程数的状态下，依然有着不错的速度！</li>
<li>使用异步虽然在这里并没有多大的优势相对于多线程来说，但是当请求量很大时，就能显示出异步的强大了。在这里就不做过多赘述了！</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;爬取豆瓣电影top250。&quot;&gt;&lt;a href=&quot;#爬取豆瓣电影top250。&quot; class=&quot;headerlink&quot; title=&quot;爬取豆瓣电影top250。&quot;&gt;&lt;/a&gt;爬取豆瓣电影top250。&lt;/h2&gt;&lt;h2 id=&quot;1-单线程版&quot;&gt;&lt;a href=&quot;#1-单
    
    </summary>
    
    
      <category term="爬虫" scheme="http://lambdaplus.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>Python函数式编程</title>
    <link href="http://lambdaplus.github.io/2016/10/11/Python_Function_Program/"/>
    <id>http://lambdaplus.github.io/2016/10/11/Python_Function_Program/</id>
    <published>2016-10-11T10:40:52.000Z</published>
    <updated>2017-02-06T09:47:30.629Z</updated>
    
    <content type="html"><![CDATA[<p>讲起函数式编程，我首先想到的就是<code>scheme</code>。但是今天研究一下<code>python</code>的函数式编程。所谓<a href="https://zh.wikipedia.org/wiki/%E5%87%BD%E6%95%B8%E7%A8%8B%E5%BC%8F%E8%AA%9E%E8%A8%80" target="_blank" rel="external">函数式编程</a>即</p>
<blockquote>
<p>函数式编程（英语：functionalprogramming）或称函数程序设计，又称泛函编程，是一种编程范型，它将电脑运算视为数学上的函数计算，并且避免使用程序状态以及易变对象。函数编程语言最重要的基础是λ演算（lambda calculus）。而且λ演算的函数可以接受函数当作输入(引数）和输出（传出值）。<br><del>维基百科上抄了一把</del></p>
</blockquote>
<p>python内置了<code>map</code> <code>filter</code> <code>reduce</code>三个函数。可以用来进行函数式编程。</p>
<h2 id="1-Map"><a href="#1-Map" class="headerlink" title="1. Map"></a>1. Map</h2><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">map(func, *iterables) --&gt; map object</div><div class="line"></div><div class="line">Make an iterator that computes the function using arguments fromeach of the iterables.  Stops when the shortest iterable is exhausted.</div></pre></td></tr></table></figure>
<p>从<code>help(map)</code>中可以看到。map接受两个参数：函数(func)和可迭代对象(iterables)。最终返回一个<code>map</code>对象！<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">In [26]: def square(x):</div><div class="line">    ...:     return x ** 2</div><div class="line"></div><div class="line">In [27]: m = map(square, list(range(10)))</div><div class="line"></div><div class="line">In [28]: m</div><div class="line">Out[28]: &lt;map at 0x7f53de4d0588&gt;</div><div class="line"></div><div class="line">In [29]: list(m)</div><div class="line">Out[29]: [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]</div><div class="line">In [131]: list(m)</div><div class="line">Out[131]: [] # 再次list发现，输出为空。说明map对象是一次性的，其内部可能是用生成器实现的。待会自己实现一个看看。</div></pre></td></tr></table></figure></p>
<p>当然可以使用<code>for</code>循环来做上述事情。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">30</span>]: seq = []</div><div class="line"></div><div class="line">In [<span class="number">31</span>]: <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</div><div class="line">    ...:     s = square(i)</div><div class="line">    ...:     seq.append(s)</div><div class="line">    ...:     </div><div class="line"></div><div class="line">In [<span class="number">32</span>]: seq</div><div class="line">Out[<span class="number">32</span>]: [<span class="number">0</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>, <span class="number">36</span>, <span class="number">49</span>, <span class="number">64</span>, <span class="number">81</span>]</div></pre></td></tr></table></figure></p>
<p>可见，<code>map</code>更加优雅。</p>
<h2 id="2-Filter"><a href="#2-Filter" class="headerlink" title="2. Filter"></a>2. Filter</h2><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">filter(function or None, iterable) --&gt; filter object</div><div class="line"></div><div class="line">Return an iterator yielding those items of iterable for which function(item)is true. If function is None, return the items that are true.</div></pre></td></tr></table></figure>
<p><code>filter</code> 顾名思义，就是过滤。其接受一个或两个参数。<br>分两种情况。</p>
<ol>
<li>类似<code>map</code>： 两个参数<code>func</code>和<code>iterable</code>。返回<code>func(item)</code>为<code>True</code>的<code>item</code></li>
<li>一个参数<code>iterable</code>。返回为<code>True</code>的<code>item</code><br>下面，写一个筛选质数的函数。<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">prime_num</span><span class="params">(x)</span>:</span></div><div class="line">    root_x = int(sqrt(x)) + <span class="number">1</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>, root_x):</div><div class="line">        <span class="keyword">if</span> x % i == <span class="number">0</span>:</div><div class="line">            <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">continue</span></div><div class="line">    <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line"></div><div class="line">f = filter(prime_num, list(range(<span class="number">100</span>)))</div><div class="line"><span class="comment"># filter对象其实也是一次性的</span></div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="3-Reduce"><a href="#3-Reduce" class="headerlink" title="3. Reduce"></a>3. Reduce</h2><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">reduce(function, sequence[, initial]) -&gt; value</div><div class="line">    </div><div class="line">Apply a function of two arguments cumulatively to the items of a sequence,from left to right, so as to reduce the sequence to a single value.For example, reduce(lambda x, y: x+y, [1, 2, 3, 4, 5]) calculates((((1+2)+3)+4)+5).  If initial is present, it is placed before the items of the sequence in the calculation, and serves as a default when the sequence is empty.</div></pre></td></tr></table></figure>
<p><code>reduce</code>在我的印象中，就是对一个序列进行计算，计算的方式取决于其第一个参数<code>function</code>。目前，我也仅仅用<code>reduce</code>做一些数值运算而已。哈哈<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">132</span>]: <span class="keyword">from</span> functools <span class="keyword">import</span> reduce</div><div class="line">In [<span class="number">137</span>]: <span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x, y)</span>:</span></div><div class="line">     ...:     <span class="keyword">return</span> x + y</div><div class="line">     ...: </div><div class="line"></div><div class="line">In [<span class="number">138</span>]: reduce(add, list(range(<span class="number">100</span>)))</div><div class="line">Out[<span class="number">138</span>]: <span class="number">4950</span></div><div class="line"></div><div class="line">In [<span class="number">139</span>]: reduce(add, list(range(<span class="number">100</span>)), <span class="number">100</span>)</div><div class="line">Out[<span class="number">139</span>]: <span class="number">5050</span></div><div class="line"><span class="comment"># reduce 第三个(可选)参数的作用</span></div><div class="line">In [<span class="number">140</span>]: reduce(add, list(range(<span class="number">100</span>)), <span class="number">101</span>)</div><div class="line">Out[<span class="number">140</span>]: <span class="number">5051</span></div></pre></td></tr></table></figure></p>
<h2 id="4-Lambda"><a href="#4-Lambda" class="headerlink" title="4. Lambda"></a>4. Lambda</h2><p>在<code>reduce</code>的的doc中，有一个<code>lambda</code>，其可用于创建匿名函数。我们可以把<code>square</code>和<code>add</code>函数全部用<code>lambda</code>创建。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">145</span>]: m = map(<span class="keyword">lambda</span> x: x ** <span class="number">2</span>, list(range(<span class="number">10</span>)))</div><div class="line"></div><div class="line">In [<span class="number">146</span>]: list(m)</div><div class="line">Out[<span class="number">146</span>]: [<span class="number">0</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>, <span class="number">36</span>, <span class="number">49</span>, <span class="number">64</span>, <span class="number">81</span>]</div><div class="line">---</div><div class="line">In [<span class="number">147</span>]: reduce(<span class="keyword">lambda</span> x, y: x + y, list(range(<span class="number">100</span>)))</div><div class="line">Out[<span class="number">147</span>]: <span class="number">4950</span></div></pre></td></tr></table></figure></p>
<h2 id="实现map，-filter，-reduce"><a href="#实现map，-filter，-reduce" class="headerlink" title="实现map， filter， reduce"></a>实现<code>map</code>， <code>filter</code>， <code>reduce</code></h2><h3 id="1-map"><a href="#1-map" class="headerlink" title="1. map"></a>1. map</h3><p>刚在说了要实现<code>map</code>，挖的坑要填。1 2 3 开始。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">In [149]: L = []</div><div class="line">In [150]: def my_map(func, iterable):</div><div class="line">     ...:     for i in iterable:</div><div class="line">     ...:         i = func(i)</div><div class="line">     ...:         L.append(i)</div><div class="line">     ...:     return L</div><div class="line">     ...: </div><div class="line"></div><div class="line">In [151]: m = my_map(lambda x: x**2, list(range(10)))</div><div class="line"></div><div class="line">In [152]: m</div><div class="line">Out[152]: [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]</div></pre></td></tr></table></figure></p>
<p>但是此时的<code>my_map</code>并不是一次性的。而是一个<code>list</code>，没有达到要求。再完善下，要不，午觉都睡不好。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">155</span>]: <span class="function"><span class="keyword">def</span> <span class="title">my_map</span><span class="params">(func, *seq)</span>:</span></div><div class="line">    ...:     <span class="keyword">try</span>:</div><div class="line">    ...:         isinstance(seq, Iterable) <span class="keyword">is</span> <span class="keyword">True</span></div><div class="line">    ...:         <span class="keyword">for</span> i <span class="keyword">in</span> seq:</div><div class="line">    ...:             i = func(i)</div><div class="line">    ...:             <span class="keyword">yield</span> i</div><div class="line">    ...:     <span class="keyword">except</span> TypeError <span class="keyword">as</span> e:</div><div class="line">    ...:         print(<span class="string">'TypeError: &#123;&#125;'</span>.format(e))</div><div class="line">    ...:         </div><div class="line"></div><div class="line">     </div><div class="line">In [<span class="number">156</span>]: m = my_map(<span class="keyword">lambda</span> x: x**<span class="number">2</span>, list(range(<span class="number">10</span>)))</div><div class="line"></div><div class="line">In [<span class="number">157</span>]: m</div><div class="line">Out[<span class="number">157</span>]: &lt;generator object my_map at <span class="number">0x7f53de4d2d58</span>&gt;</div><div class="line"></div><div class="line">In [<span class="number">158</span>]: list(m)</div><div class="line">Out[<span class="number">158</span>]: [<span class="number">0</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>, <span class="number">36</span>, <span class="number">49</span>, <span class="number">64</span>, <span class="number">81</span>]</div><div class="line"></div><div class="line"></div><div class="line">In [<span class="number">159</span>]: list(m)</div><div class="line">Out[<span class="number">159</span>]: []</div></pre></td></tr></table></figure></p>
<p>使用<code>yield</code>把其变成生成器貌似有点像啦。简略的实现下。先这样，困死啦！明天回家(2016 10 02)。给祖国母亲过生日,哈哈。</p>
<p>昨天(2016 10 09)回来了，今天继续干。</p>
<h3 id="2-filter"><a href="#2-filter" class="headerlink" title="2. filter"></a>2. filter</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">9</span>]: <span class="function"><span class="keyword">def</span> <span class="title">my_filter</span><span class="params">(func, seq)</span>:</span></div><div class="line">   ...:     <span class="keyword">for</span> i <span class="keyword">in</span> seq:</div><div class="line">   ...:         <span class="keyword">if</span> func(i):</div><div class="line">   ...:             <span class="keyword">yield</span> i</div></pre></td></tr></table></figure>
<p>实现的很拙劣！</p>
<h3 id="3-reduce"><a href="#3-reduce" class="headerlink" title="3. reduce"></a>3. reduce</h3><p>再来看看<code>reduce</code>。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;讲起函数式编程，我首先想到的就是&lt;code&gt;scheme&lt;/code&gt;。但是今天研究一下&lt;code&gt;python&lt;/code&gt;的函数式编程。所谓&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E5%87%BD%E6%95%B8%E7%A8%8
    
    </summary>
    
    
      <category term="Python" scheme="http://lambdaplus.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>二分法查找</title>
    <link href="http://lambdaplus.github.io/2016/10/09/binary_sum/"/>
    <id>http://lambdaplus.github.io/2016/10/09/binary_sum/</id>
    <published>2016-10-09T03:30:26.000Z</published>
    <updated>2017-02-06T09:47:30.629Z</updated>
    
    <content type="html"><![CDATA[<p>几个惊艳的递归！</p>
<ol>
<li><p>第一次见到这种方法求和，真是吓了我一跳！</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">10</span>]: <span class="function"><span class="keyword">def</span> <span class="title">binary_sum</span><span class="params">(S, lft=None, rgt=None)</span>:</span></div><div class="line">    ...:     <span class="keyword">if</span> lft <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">    ...:         lft = <span class="number">0</span></div><div class="line">    ...:     <span class="keyword">if</span> rgt <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">    ...:         rgt = len(S)</div><div class="line">    ...:         </div><div class="line">    ...:     <span class="keyword">if</span> lft &gt; rgt:</div><div class="line">    ...:         <span class="keyword">return</span> <span class="number">0</span></div><div class="line">    ...:     <span class="keyword">elif</span> lft == rgt - <span class="number">1</span>:</div><div class="line">    ...:         <span class="keyword">return</span> S[lft]</div><div class="line">    ...:     <span class="keyword">else</span>:</div><div class="line">    ...:         mid = (lft + rgt) // <span class="number">2</span></div><div class="line">    ...:         <span class="keyword">return</span> binary_sum(S, lft, mid) + binary_sum(S, mid, rgt)</div></pre></td></tr></table></figure>
</li>
<li><p>高效率的fibonacci seq</p>
</li>
</ol>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">17</span>]: <span class="function"><span class="keyword">def</span> <span class="title">good_fib</span><span class="params">(n)</span>:</span></div><div class="line">    ...:     <span class="keyword">if</span> n &lt;= <span class="number">1</span>:</div><div class="line">    ...:         <span class="keyword">return</span> (n, <span class="number">0</span>)</div><div class="line">    ...:     <span class="keyword">else</span>:</div><div class="line">    ...:         (a, b) = good_fib(n<span class="number">-1</span>)</div><div class="line">    ...:         <span class="keyword">return</span> (a + b, a)</div></pre></td></tr></table></figure>
<p>与普通的相比<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">31</span>]: <span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(n)</span>:</span></div><div class="line">    ...:     <span class="keyword">if</span> n &lt;= <span class="number">1</span>:</div><div class="line">    ...:         <span class="keyword">return</span> n</div><div class="line">    ...:     <span class="keyword">else</span>:</div><div class="line">    ...:         <span class="keyword">return</span> fib(n<span class="number">-2</span>) + fib(n<span class="number">-1</span>)</div></pre></td></tr></table></figure></p>
<p>good_fib()函数的复杂度为O(n),而fib()函数的复杂度为指数级！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;几个惊艳的递归！&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;第一次见到这种方法求和，真是吓了我一跳！&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1
    
    </summary>
    
    
      <category term="Algorithm" scheme="http://lambdaplus.github.io/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>Python的几种排序</title>
    <link href="http://lambdaplus.github.io/2016/10/04/Sorts/"/>
    <id>http://lambdaplus.github.io/2016/10/04/Sorts/</id>
    <published>2016-10-04T08:40:59.000Z</published>
    <updated>2017-02-18T01:04:31.845Z</updated>
    
    <content type="html"><![CDATA[<h3 id="快排"><a href="#快排" class="headerlink" title="快排"></a>快排</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> random</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">quick_sort</span><span class="params">(L)</span>:</span></div><div class="line">    <span class="keyword">if</span> len(L) &lt; <span class="number">2</span>:</div><div class="line">        <span class="keyword">return</span> L</div><div class="line">    </div><div class="line">    mid = random.choice(L)</div><div class="line">    left = [x <span class="keyword">for</span> x <span class="keyword">in</span> L <span class="keyword">if</span> x &lt; mid]</div><div class="line">    right = [x <span class="keyword">for</span> x <span class="keyword">in</span> L <span class="keyword">if</span> x &gt;= mid]</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> quick_sort(left) + quick_sort(right)</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    L = [random.randrange(<span class="number">100</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">10</span>)]</div><div class="line">    print(insert_sort(L))</div></pre></td></tr></table></figure>
<h3 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> random</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">insert_sort</span><span class="params">(L)</span>:</span></div><div class="line">    <span class="keyword">if</span> len(L) &lt; <span class="number">2</span>:</div><div class="line">        <span class="keyword">return</span> L</div><div class="line">    </div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len(L)):</div><div class="line">        tmp = L[i]</div><div class="line">        j = i - <span class="number">1</span></div><div class="line">        <span class="keyword">while</span> j &gt;= <span class="number">0</span> <span class="keyword">and</span> L[j] &gt; tmp:</div><div class="line">            L[j+<span class="number">1</span>] = L[j]</div><div class="line">            j = j - <span class="number">1</span></div><div class="line">        L[j+<span class="number">1</span>] = tmp <span class="comment"># 把tmp赋值给索引最小且值大于tmp的元素</span></div><div class="line">        </div><div class="line">    <span class="keyword">return</span> L</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    <span class="string">'''</span></div><div class="line">    每次循环的结果，简单表示下</div><div class="line">    假设 L = [5, 7, 4, 6, 3]</div><div class="line">    i = 1 -&gt; [5, 7, 4, 6, 3]</div><div class="line">    i = 2 -&gt; [5, 7, 7, 6, 3] -&gt; [5, 5, 7, 6, 3] -&gt; [4, 5, 7, 6, 3]</div><div class="line">    i = 3 -&gt; [4, 5, 7, 6, 3] -&gt; [4, 5, 7, 6, 3] -&gt; [4, 5, 6, 7, 3]</div><div class="line">    i = 4 -&gt; [3, 4, 5, 6, 7]</div><div class="line">    '''</div><div class="line">    L = [random.randrange(<span class="number">100</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">10</span>)]</div><div class="line">    print(insert_sort(L))</div></pre></td></tr></table></figure>
<h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> random</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">bubble</span><span class="params">(L)</span>:</span></div><div class="line">    <span class="keyword">if</span> len(L) &lt; <span class="number">2</span>:</div><div class="line">        <span class="keyword">return</span> L</div><div class="line">    </div><div class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> range(len(L)):</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(L) <span class="number">-1</span>):</div><div class="line">            <span class="keyword">if</span> L[i] &gt; L[i+<span class="number">1</span>]:</div><div class="line">                L[i], L[i+<span class="number">1</span>] = L[i+<span class="number">1</span>], L[i]</div><div class="line">    <span class="keyword">return</span> L</div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    <span class="string">'''</span></div><div class="line">    复杂度为n ** 2</div><div class="line">    '''</div><div class="line">    L = [random.randrange(<span class="number">100</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">10</span>)]</div><div class="line">    print(bubble(L))</div><div class="line">冒泡排序还可以优化一下，因为当左边的值已经小于右边即顺序符合要求时，就不用再遍历了。</div><div class="line">```python</div><div class="line"><span class="keyword">import</span> random</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">short_bubble_sort</span><span class="params">(seq)</span>:</span></div><div class="line">    num = len(seq) - <span class="number">1</span></div><div class="line">    change = <span class="keyword">True</span></div><div class="line"></div><div class="line">    <span class="keyword">while</span> num &gt; <span class="number">0</span> <span class="keyword">and</span> change:</div><div class="line">        change = <span class="keyword">False</span></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(num):</div><div class="line">            <span class="keyword">if</span> seq[i] &gt; seq[i+<span class="number">1</span>]:</div><div class="line">                change = <span class="keyword">True</span></div><div class="line">                seq[i], seq[i+<span class="number">1</span>] = seq[i+<span class="number">1</span>], seq[i]</div><div class="line">        num -= <span class="number">1</span></div><div class="line">    <span class="keyword">return</span> seq</div><div class="line"></div><div class="line">seq = [random.randrange(<span class="number">100</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">10</span>)]</div><div class="line">print(short_bubble_sort(seq))</div></pre></td></tr></table></figure>
<h3 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randrange</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge_sort</span><span class="params">(seq)</span>:</span></div><div class="line">    mid = len(seq) // <span class="number">2</span></div><div class="line">    lft, rgt = seq[:mid], seq[mid:]</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> len(lft) &gt; <span class="number">1</span>:</div><div class="line">        lft = merge_sort(lft)</div><div class="line">    <span class="keyword">if</span> len(rgt) &gt; <span class="number">1</span>:</div><div class="line">        rgt = merge_sort(rgt)</div><div class="line">    </div><div class="line">    res = []</div><div class="line">    <span class="keyword">while</span> lft <span class="keyword">and</span> rgt:</div><div class="line">        <span class="keyword">if</span> lft[<span class="number">-1</span>] &gt;= rgt[<span class="number">-1</span>]: <span class="comment">#取lft和rgt序列中最大的值</span></div><div class="line">            res.append(lft.pop())</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            res.append(rgt.pop())</div><div class="line">    res.reverse()              <span class="comment"># 反序一下</span></div><div class="line">    <span class="keyword">return</span> (lft <span class="keyword">or</span> rgt) + res</div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    seq = [randrange(<span class="number">100</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">10</span>)]</div><div class="line">    print(merge_sort(seq))</div></pre></td></tr></table></figure>
<h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">sel_sort</span><span class="params">(seq)</span>:</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(seq)<span class="number">-1</span>, <span class="number">0</span>, <span class="number">-1</span>):</div><div class="line">        max_j = i <span class="comment"># 预设最大索引 max_j</span></div><div class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(i): </div><div class="line">            <span class="keyword">if</span> seq[j] &gt; seq[max_j]:</div><div class="line">                max_j = j <span class="comment"># 实际最大的 max_j</span></div><div class="line">        seq[i], seq[max_j] = seq[max_j], seq[i] <span class="comment"># 交换最大值</span></div><div class="line">    <span class="keyword">return</span> seq</div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    seq = [<span class="number">5</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">2</span>]</div><div class="line">    print(sel_sort(seq))</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;快排&quot;&gt;&lt;a href=&quot;#快排&quot; class=&quot;headerlink&quot; title=&quot;快排&quot;&gt;&lt;/a&gt;快排&lt;/h3&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div 
    
    </summary>
    
    
      <category term="Algorithm" scheme="http://lambdaplus.github.io/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>二叉树</title>
    <link href="http://lambdaplus.github.io/2016/09/23/binary_tree/"/>
    <id>http://lambdaplus.github.io/2016/09/23/binary_tree/</id>
    <published>2016-09-23T07:32:24.000Z</published>
    <updated>2017-02-06T09:47:30.629Z</updated>
    
    <content type="html"><![CDATA[<p>畏惧了好久的二叉树，终于在近两天开搞了。二分法查找已在前几天完成，磨刀霍霍向猪羊，吼吼吼！<br>何为二叉树？按照我目前的理解就是类似于发叉的树，树干上发两个叉或者一个(不发叉的树真不到有何用处)，发叉的地方称为<strong>节点</strong>。然后发的两个叉又可以继续像树干一样发叉，新发的叉有可以继续发叉，子又生子，孙又生孙，无穷尽也！但是<strong>树的左边的叉的值小于节点值，右边的大于节点值</strong>。</p>
<p>本文参考：<br><a href="https://github.com/qiwsir/algorithm/blob/master/binary_tree.md" target="_blank" rel="external">老齐的Github</a></p>
<p>首先，建立一棵树。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, data)</span>:</span></div><div class="line">        self.left = <span class="keyword">None</span></div><div class="line">        self.right = <span class="keyword">None</span></div><div class="line">        self.data = data</div></pre></td></tr></table></figure></p>
<p>这样，光秃秃的小树苗就种好了。接着就是茁长生长啦。浇水去喽！<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">class Node：</div><div class="line">    '''</div><div class="line">    ...</div><div class="line">    '''</div><div class="line">    def insert(self, data): </div><div class="line">        if data &lt; self.data: # 树叉小于节点</div><div class="line">            if self.left is None: # 并且左面的树叉为空</div><div class="line">                self.left = Node(data) # 当仁不让的插入</div><div class="line">            else:                   # 非空的话</div><div class="line">                self.left.insert(data) # 以左树叉为节点继续插入</div><div class="line"></div><div class="line">        elif data &gt; self.data: </div><div class="line">            if self.right is None:</div><div class="line">                self.right = Node(data)</div><div class="line">            else:</div><div class="line">                self.right.insert(data)</div><div class="line">        else:</div><div class="line">            self.data = data</div></pre></td></tr></table></figure></p>
<p>浇完水后，小树苗噌噌的往上窜啊。<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">class Node：</div><div class="line">    '''</div><div class="line">    省略上述代码</div><div class="line">    '''</div><div class="line">    def search(self, data, parent=None):</div><div class="line">    '''</div><div class="line">    data为目标查询值，同时返回parent(父节点)便于定位。</div><div class="line">    '''</div><div class="line">        if data &lt; self.data: </div><div class="line">            if self.left is None:</div><div class="line">                return None, None</div><div class="line">            else:</div><div class="line">                return self.left.search(data, self)</div><div class="line">     	</div><div class="line">        elif data &gt; self.data:</div><div class="line">            if self.right is None:</div><div class="line">                return None, None</div><div class="line">            </div><div class="line">            return self.right.search(data, self)</div><div class="line">        else:</div><div class="line">     	  #  return self.data, parent.data</div><div class="line">            return self, parent</div></pre></td></tr></table></figure></p>
<p>树苗生长的那么好，想看看每个叉上都是啥呀，来来来，抬头往上看((其实是往下看啦)。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_tree</span><span class="params">(self)</span>:</span></div><div class="line">    <span class="keyword">if</span> self.left:</div><div class="line">        self.left.print_tree()</div><div class="line">    print(self.data)</div><div class="line">    <span class="keyword">if</span> self.right:</div><div class="line">        self.right.print_tree()</div></pre></td></tr></table></figure></p>
<p>转眼间小树苗涨的太旺盛了，疯涨啊！！怎么办呢，剪几个枝吧。别怪我哦，小树苗！<br>删除节点时，有三种可能的情况：</p>
<ol>
<li>目标节点下没有任何节点(0个)</li>
<li>目标节点下有一个节点</li>
<li>目标节点下有两个节点</li>
</ol>
<p>判断节点数目程序如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span>：</span></div></pre></td></tr></table></figure></p>
<pre><code>省略代码
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">def chrildren(self):</div><div class="line">    count = 0</div><div class="line">    if self.left:</div><div class="line">        count += 1</div><div class="line"></div><div class="line">    if self.right:</div><div class="line">        count += 1</div><div class="line"></div><div class="line">    return count</div></pre></td></tr></table></figure>
</code></pre><p>接下来就是删除操作啦。哦吼吼。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span>：</span></div></pre></td></tr></table></figure></p>
<pre><code>省略
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">    def delete(self, data):</div><div class="line">        node, parent = self.search(data) </div><div class="line">        chrildren = node.chrildren() # 子节点数目</div><div class="line">        if chrildren == 0: # 情况 1</div><div class="line">            if parent.left is node: # 判断目标节点是其父节点的 左or右 节点</div><div class="line">                parent.left = None</div><div class="line">            else:</div><div class="line">                parent.right = None</div><div class="line">            del node</div><div class="line"></div><div class="line">        elif chrildren == 1: # 情况 2</div><div class="line">            if node.left:</div><div class="line">                tmp = node.left</div><div class="line">            else:</div><div class="line">                tmp = node.right</div><div class="line">            if parent:</div><div class="line">                if parent.left is node:</div><div class="line">                    parent.left = tmp</div><div class="line">                else:</div><div class="line">                    parent.right = tmp</div><div class="line">            del node</div><div class="line">        else:                # 情况 3 没看太懂，过两天再看吧</div><div class="line">        &apos;&apos;&apos;</div><div class="line">        第三种情况比较复杂</div><div class="line">        1. 左节点0个子节点</div><div class="line">        2. 左节点1个子节点</div><div class="line">        3. 左节点2个子节点</div><div class="line">        &apos;&apos;&apos;</div><div class="line">            parent = node</div><div class="line">            successor = node.left</div><div class="line">            while successor.left:</div><div class="line">                parent = successor</div><div class="line">                successor = successor.left</div><div class="line">            node.data = successor.data</div><div class="line">            if parent.left = successor:</div><div class="line">                parent.left = successor.right</div><div class="line">            else:</div><div class="line">                parent.left = successor.right</div><div class="line"></div><div class="line"></div><div class="line"># 接下来可以测试以下种的树怎么样啦。</div><div class="line">root = Node(11)</div><div class="line">root.insert(14)</div><div class="line">root.insert(9)</div><div class="line">root.insert(9)</div><div class="line">root.insert(7)</div><div class="line">root.insert(10)</div><div class="line">root.insert(4)</div><div class="line">root.insert(5)</div><div class="line">root.insert(6)</div><div class="line">root.insert(8)</div><div class="line">value, parent = root.search(10)</div><div class="line">print(value.data, parent.data)</div><div class="line">root.print_tree()</div><div class="line">print(&apos;*&apos; * 20)</div><div class="line">root.delete(4)</div><div class="line">root.print_tree()</div></pre></td></tr></table></figure>
</code></pre><p>把自己理解的部分写了写。当做练习，就先当个α版吧。</p>
<p><code>2016-05-28</code></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;畏惧了好久的二叉树，终于在近两天开搞了。二分法查找已在前几天完成，磨刀霍霍向猪羊，吼吼吼！&lt;br&gt;何为二叉树？按照我目前的理解就是类似于发叉的树，树干上发两个叉或者一个(不发叉的树真不到有何用处)，发叉的地方称为&lt;strong&gt;节点&lt;/strong&gt;。然后发的两个叉又可以继
    
    </summary>
    
    
      <category term="Algorithm" scheme="http://lambdaplus.github.io/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>二分法查找</title>
    <link href="http://lambdaplus.github.io/2016/09/23/binary_search/"/>
    <id>http://lambdaplus.github.io/2016/09/23/binary_search/</id>
    <published>2016-09-23T07:32:24.000Z</published>
    <updated>2017-02-06T09:47:30.629Z</updated>
    
    <content type="html"><![CDATA[<p>二分法查找，顾名思义，二分、二分就是分成两半呗。(有的翻译是<code>折半法搜索</code>比如SICP里翻译的就是<code>折半法搜索</code>)。它的复杂度为O(logn)，在列表(已排序)中对给定值<code>value</code>进行查找并输出其索引(index)值。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">binary_search</span><span class="params">(lst, value)</span>:</span></div><div class="line">    left, right = <span class="number">0</span>, len(lst) - <span class="number">1</span></div><div class="line">    </div><div class="line">    <span class="keyword">while</span> left &lt;= right:</div><div class="line">        middle = int((left + right) / <span class="number">2</span>) <span class="comment"># 取`lst`中值索引</span></div><div class="line">        </div><div class="line">        <span class="keyword">if</span> value &gt; lst[middle]:</div><div class="line">            left = middle + <span class="number">1</span> <span class="comment"># value大于`lst`中值，让左边界等于 middle + 1</span></div><div class="line">        <span class="keyword">elif</span> value &lt; lst[middle]:</div><div class="line">            right = middle - <span class="number">1</span> <span class="comment"># 类似上</span></div><div class="line">            </div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">return</span> <span class="string">"The value's index is &#123;&#125;"</span>.format(middle)</div><div class="line">    <span class="keyword">return</span> <span class="string">"There is no &#123;&#125;"</span>.format(value)</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    lst = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>]</div><div class="line">    value = int(input(<span class="string">"Please input the value(1-10): "</span>))</div><div class="line">    print(binary_search(lst, value))</div></pre></td></tr></table></figure>
<p>再来个递归(recursion)版的吧， 不作过多解释啦！<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">binary_search_rec</span><span class="params">(lst, value, left, right)</span>:</span></div><div class="line">    middle = int((left + right) / <span class="number">2</span>)</div><div class="line"></div><div class="line">    <span class="keyword">if</span> left &gt; right:</div><div class="line">        <span class="keyword">return</span> <span class="string">"I'm sorry, there is no &#123;&#125;"</span>.format(value)</div><div class="line"></div><div class="line">    <span class="keyword">if</span> value &lt; lst[middle]:</div><div class="line">        <span class="keyword">return</span> binary_search_rec(lst, value, left, middle - <span class="number">1</span>)</div><div class="line"></div><div class="line">    <span class="keyword">elif</span> value &gt; lst[middle]:</div><div class="line">    	<span class="keyword">return</span> binary_search_rec(lst, value, middle + <span class="number">1</span>, right)</div><div class="line"></div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">return</span> <span class="string">"Congratulations, the value's(&#123;&#125;) index is &#123;&#125;"</span>.format(value, middle)</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    lst = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>]</div><div class="line">    left, right = <span class="number">0</span>, len(lst)</div><div class="line">    value = int(input(<span class="string">"Please input the value: "</span>))</div><div class="line">    print(binary_search_rec(lst, value, left, right))</div></pre></td></tr></table></figure></p>
<p>没事。温习以下二分搜索！</p>
<p>被拼写错误折磨了一晚上。好好的lft被我写成ltf。debug生无可恋！<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randrange</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">binary_search</span><span class="params">(seq, sit, lft, rgt)</span>:</span></div><div class="line">    mid = (lft + rgt) // <span class="number">2</span></div><div class="line">    </div><div class="line">    <span class="keyword">if</span> lft &gt; rgt:</div><div class="line">        <span class="keyword">return</span> <span class="string">'The seq no &#123;&#125;'</span>.format(sit)</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> sit &gt; seq[mid]:</div><div class="line">        <span class="keyword">return</span> binary_search(seq, sit, mid+<span class="number">1</span>, rgt)</div><div class="line">    </div><div class="line">    <span class="keyword">elif</span> sit &lt; seq[mid]:</div><div class="line">        <span class="keyword">return</span> binary_search(seq, sit, lft, mid<span class="number">-1</span>)</div><div class="line">    </div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">return</span> <span class="string">'The &#123;&#125; in the seq and the station is &#123;&#125;'</span>.format(sit, mid)</div><div class="line">        </div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    seq = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">12</span>, <span class="number">44</span>, <span class="number">56</span>]</div><div class="line">    lft, rgt = <span class="number">0</span>, len(seq)</div><div class="line">    print(binary_search(seq, <span class="number">4</span>, lft, rgt))</div></pre></td></tr></table></figure></p>
<p>昨天面试,面试官出了一道算法题:</p>
<blockquote>
<p>有一个数组,其内元素先递增后递减,请找出其中的最大值.</p>
</blockquote>
<p>对于我来说,当时第一个想起来的是,排序但是转念间就知道肯定不是最好的啦.于是就在哪儿想啊想,还是想不起来.气氛挺尴尬的,外面也挺冷的(电话面试,外面安静).我想不起来,面试小哥也不急着催我,最后也算是在小哥的提示下,想起了怎么做啦!(太感谢小哥啦, 小哥好人! 喂, 你们几个不许笑啊喂!)</p>
<p>当然是<strong>二分</strong>啦,下面是算法实现!</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># coding=utf-8</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">search_max_num</span><span class="params">(seq, left, right)</span>:</span></div><div class="line">    mid = (right + left) // <span class="number">2</span></div><div class="line">    <span class="keyword">if</span> left &gt; right:</div><div class="line">        <span class="keyword">return</span> seq[mid]</div><div class="line">    <span class="keyword">if</span> seq[mid] &gt; seq[mid - <span class="number">1</span>]:</div><div class="line">        <span class="keyword">return</span> search_max_num(seq, mid + <span class="number">1</span>, right)</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">return</span> search_max_num(seq, left, mid - <span class="number">1</span>)</div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    seq = [<span class="number">32</span>, <span class="number">55</span>, <span class="number">54</span>, <span class="number">54</span>, <span class="number">54</span>, <span class="number">54</span>, <span class="number">32</span>, <span class="number">15</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">1</span>]</div><div class="line">    print(search_max_num(seq, <span class="number">0</span>, len(seq)))</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;二分法查找，顾名思义，二分、二分就是分成两半呗。(有的翻译是&lt;code&gt;折半法搜索&lt;/code&gt;比如SICP里翻译的就是&lt;code&gt;折半法搜索&lt;/code&gt;)。它的复杂度为O(logn)，在列表(已排序)中对给定值&lt;code&gt;value&lt;/code&gt;进行查找并输出其索引(i
    
    </summary>
    
    
      <category term="Algorithm" scheme="http://lambdaplus.github.io/tags/Algorithm/"/>
    
  </entry>
  
</feed>
